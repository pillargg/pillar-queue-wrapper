{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"pillar-queue-wrapper Pillar's wrapper around AWS SQS There are 2 options for authentication through this wrapper - Explicit: Where the 'aws_access_key' and 'aws_access_secret' are explicitly passed into the queue function - Implicit: Where 'None' is passed into the queue function and it trys to get the credetials from the AWS cli Install the aws cli and add the 'aws_access_key' and 'aws_access_secret' to it. Quickstart/Basic Usage q = Queue( name=\"queuename\", aws_access_key=\"aws_access_key here\", aws_access_secret=\"aws_access_secret here\", aws_default_region='us-east-1', ) #Note if a queue name ends with .fifo, it is a fifo queue q.send_message(message=\"A test message\", message_attributes={}, message_group_id=None, deduplication_id=None) #blocking function that will wait for a message to appear message = q.wait_for_message(delete_message=True) print(message.body) Testing 1) Install AWS CLI with pip install awscli , insert your AWS iam Access key ID and Secret access key found in the AWS IAM console 2) Make two queues in the SQS Tab called testqueue and testqueue.fifo . The queue testqueue.fifo should be of the FIFO type detailed here . These queues will be used to run the tests. 3) Run 'pytest' Future Features: Queue creation/destruction Message pooling get,set, and delete functionality to use queues like arrays pythonically","title":"pillar-queue-wrapper"},{"location":"#pillar-queue-wrapper","text":"Pillar's wrapper around AWS SQS There are 2 options for authentication through this wrapper - Explicit: Where the 'aws_access_key' and 'aws_access_secret' are explicitly passed into the queue function - Implicit: Where 'None' is passed into the queue function and it trys to get the credetials from the AWS cli Install the aws cli and add the 'aws_access_key' and 'aws_access_secret' to it.","title":"pillar-queue-wrapper"},{"location":"#quickstartbasic-usage","text":"q = Queue( name=\"queuename\", aws_access_key=\"aws_access_key here\", aws_access_secret=\"aws_access_secret here\", aws_default_region='us-east-1', ) #Note if a queue name ends with .fifo, it is a fifo queue q.send_message(message=\"A test message\", message_attributes={}, message_group_id=None, deduplication_id=None) #blocking function that will wait for a message to appear message = q.wait_for_message(delete_message=True) print(message.body)","title":"Quickstart/Basic Usage"},{"location":"#testing","text":"1) Install AWS CLI with pip install awscli , insert your AWS iam Access key ID and Secret access key found in the AWS IAM console 2) Make two queues in the SQS Tab called testqueue and testqueue.fifo . The queue testqueue.fifo should be of the FIFO type detailed here . These queues will be used to run the tests. 3) Run 'pytest'","title":"Testing"},{"location":"#future-features","text":"Queue creation/destruction Message pooling get,set, and delete functionality to use queues like arrays pythonically","title":"Future Features:"},{"location":"client/","text":"__init__ ( self , name , aws_access_key = None , aws_access_secret = None , aws_default_region = 'us-east-1' ) special Initializes the class. The variable name is the name of the queue as seen on AWS. The variables aws_access_key and aws_access_secret correspond to the variables aws_access_key_id and aws_secret_access_key from within boto3. If these variables are not set, boto3 will get your credentials as detailed here . The default region set by this library is us-east-1 . To change that, simply set aws_default_region to the region string, for example us-east-2 or `eu- __len__ ( self ) special Get approximate length of the queue. See here for more info. Set q.wait_for_accuracy = True to have this function block for 60 seconds while the AWS queueing service updates itself to get a more up to date value. purge ( self ) Purges all messages from the queue. WARNING: This can be a dangerous function to execute as all items will be purged regardless of the state of any other programs accessing the queue. This function will also purge all items added to the queue for 60 seconds from the function call. This function is blocking for those 60 seconds. receive_message ( self , wait_time = 10 , delete_message = True ) Get a message from the queue. The variable wait_time is how long it waits in seconds before returning None if the queue is empty. The minimum wait_time is 1 second. By default, the message received is deleted from the queue when gotten, as this library assumes you will be processing the message upon receiving it. If you do not want to do this, you can instead set delete_message to False , preventing the message from being deleted from the queue. To later delete the message, see here . send_message ( self , message , message_attributes = {}, message_group_id = None , deduplication_id = None ) Sends a message to the queue. The body of the message is housed in the message variable. Information about message_attributes can be found here . The following variables are only relevant if you are using a FIFO Queue on AWS SQS. More information about the type of queue can be found here . Information about deduplication_id can be found here . By default a random one is used to allow for all messages to be added to the queue. Information about message_group_id can be found here . wait_for_message ( self , delete_message = True ) Blocking function that waits for a message to appear in the specified(via init function) queue. Returns the single message that it received from the queue. By default, the message received is deleted from the queue when gotten, as this library assumes you will be processing the message upon receiving it. If you do not want to do this, you can instead set delete_message to False , preventing the message from being deleted from the queue. To later delete the message, see here .","title":"Client"},{"location":"client/#pillar_queue.client.Queue","text":"","title":"pillar_queue.client.Queue"},{"location":"client/#pillar_queue.client.Queue.__init__","text":"Initializes the class. The variable name is the name of the queue as seen on AWS. The variables aws_access_key and aws_access_secret correspond to the variables aws_access_key_id and aws_secret_access_key from within boto3. If these variables are not set, boto3 will get your credentials as detailed here . The default region set by this library is us-east-1 . To change that, simply set aws_default_region to the region string, for example us-east-2 or `eu-","title":"__init__()"},{"location":"client/#pillar_queue.client.Queue.__len__","text":"Get approximate length of the queue. See here for more info. Set q.wait_for_accuracy = True to have this function block for 60 seconds while the AWS queueing service updates itself to get a more up to date value.","title":"__len__()"},{"location":"client/#pillar_queue.client.Queue.purge","text":"Purges all messages from the queue. WARNING: This can be a dangerous function to execute as all items will be purged regardless of the state of any other programs accessing the queue. This function will also purge all items added to the queue for 60 seconds from the function call. This function is blocking for those 60 seconds.","title":"purge()"},{"location":"client/#pillar_queue.client.Queue.receive_message","text":"Get a message from the queue. The variable wait_time is how long it waits in seconds before returning None if the queue is empty. The minimum wait_time is 1 second. By default, the message received is deleted from the queue when gotten, as this library assumes you will be processing the message upon receiving it. If you do not want to do this, you can instead set delete_message to False , preventing the message from being deleted from the queue. To later delete the message, see here .","title":"receive_message()"},{"location":"client/#pillar_queue.client.Queue.send_message","text":"Sends a message to the queue. The body of the message is housed in the message variable. Information about message_attributes can be found here . The following variables are only relevant if you are using a FIFO Queue on AWS SQS. More information about the type of queue can be found here . Information about deduplication_id can be found here . By default a random one is used to allow for all messages to be added to the queue. Information about message_group_id can be found here .","title":"send_message()"},{"location":"client/#pillar_queue.client.Queue.wait_for_message","text":"Blocking function that waits for a message to appear in the specified(via init function) queue. Returns the single message that it received from the queue. By default, the message received is deleted from the queue when gotten, as this library assumes you will be processing the message upon receiving it. If you do not want to do this, you can instead set delete_message to False , preventing the message from being deleted from the queue. To later delete the message, see here .","title":"wait_for_message()"}]}